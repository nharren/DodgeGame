function Obstacle.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push constant 0
pop this 0
push constant 0
pop this 1
push constant 0
pop this 2
push argument 0
pop static 0
push pointer 0
return
function Obstacle.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Obstacle.setColumn 0
push argument 0
pop pointer 0
push argument 1
pop this 2
push constant 0
return
function Obstacle.move 0
push argument 0
pop pointer 0
push this 2
push constant 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
call Obstacle.reset 1
pop temp 0
push constant 35
pop this 2
goto IF_END0
label IF_FALSE0
push this 2
push constant 1
sub
pop this 2
label IF_END0
push constant 0
return
function Obstacle.reset 0
push argument 0
pop pointer 0
push static 0
call Random.next 1
pop this 0
push static 0
call Random.next 1
pop this 1
push constant 0
return
function Obstacle.draw 4
push argument 0
pop pointer 0
push this 2
push constant 31
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 2
push constant 16
call Math.multiply 2
pop local 2
push local 2
push constant 15
add
pop local 3
push local 2
push constant 0
push local 3
push constant 255
call Screen.drawRectangle 4
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push constant 4
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 0
push constant 32
call Math.multiply 2
pop local 0
push local 0
push constant 31
add
pop local 1
push local 2
push local 0
push local 3
push local 1
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE1
push this 1
push constant 4
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 128
push this 1
push constant 32
call Math.multiply 2
add
pop local 0
push local 0
push constant 31
add
pop local 1
push local 2
push local 0
push local 3
push local 1
call Screen.drawRectangle 4
pop temp 0
label IF_FALSE2
push constant 0
return
